{"version":3,"sources":["components/partials/login.jsx","components/partials/signup.jsx","components/pages/Authentication.jsx","components/partials/sidebar.jsx","components/partials/message.jsx","components/partials/chatInput.jsx","components/store/actions/chatActions.js","components/partials/threadView.jsx","components/partials/groupCreator.jsx","components/pages/Messenger.jsx","components/pages/Settings.jsx","components/store/actions/authActions.js","App.js","reportWebVitals.js","components/store/reducers/authReducer.js","components/store/reducers/chatReducer.js","components/store/reducers/index.js","components/store/configureStore.js","index.js"],"names":["Login","state","email","password","className","onSubmit","e","preventDefault","props","chat","socket","send","JSON","stringify","type","data","placeholder","value","this","onChange","setState","target","to","Component","connect","auth","dispatch","Signup","passwordAgain","name","username","error","empty","Object","keys","forEach","key","Authentication","match","path","withRouter","Sidebar","search","solo","findOrCreateThread","user","onClick","users","filter","u","id","map","ui","console","log","threads","thread","ti","length","style","display","flexDirection","profiles","profile","userId","avatar","Avatar","src","Messages","picture","content","substring","color","marginLeft","image","Message","dateFormat","date","Date","parse","message","Intl","DateTimeFormat","year","month","day","format","hour","minute","Profile","title","alt","data-toggle","ChatInput","tobase64","reader","FileReader","readAsDataURL","onload","result","sendMessage","compression","Compressor","quality","success","compressedResult","msg","threadId","params","position","files","opacity","width","height","toBase64","fileInput","ChatActions","ThreadView","settings","nicknames","nicknameEdit","newNick","threadNameChange","newThreadName","showThreadView","init","currentThread","t","skip","setCurrentThread","handleClick","nickChanged","threadNameChanged","threadAvatarChanged","url","classes","justifyContent","p","List","component","aria-labelledby","root","ListItem","button","TextField","label","ListItemIcon","ListItemText","primary","alignItems","Collapse","in","timeout","unmountOnExit","disablePadding","nested","mi","payload","withStyles","theme","maxWidth","backgroundColor","palette","background","paper","paddingLeft","spacing","GroupCreator","getAllAvailableUsers","createAGroup","push","usersArray","paddingTop","textAlign","fontSize","fontStyle","Messenger","Settings","saved","profileUpdate","profileId","AuthActions","App","setupSocket","token","render","exact","WebSocket","onopen","onmessage","document","getElementById","scrollTop","scrollHeight","messages","threadName","clients","logout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","action","session","concat","combineReducers","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","ReactDOM","loading","StrictMode"],"mappings":"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","file":"static/js/main.c156ec46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nclass Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-md-12'>\r\n                        <div className='form-wrapper'>\r\n                            <h1>Login</h1>\r\n                            <form onSubmit={e => {\r\n                                e.preventDefault();\r\n                                if (this.props.chat.socket) {\r\n                                    this.props.chat.socket.send(JSON.stringify({\r\n                                        type: 'LOGIN',\r\n                                        data: {\r\n                                            email: this.state.email,\r\n                                            password: this.state.password\r\n                                        }\r\n                                    }))\r\n                                }\r\n                            }}>\r\n                                <div className='form-group'>\r\n                                    <label>Email</label>\r\n                                    <input\r\n                                        type='email'\r\n                                        className='form-control'\r\n                                        placeholder='Email'\r\n                                        value={this.state.email}\r\n                                        onChange={e => {\r\n                                            this.setState({ email: e.target.value });\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className='form-group'>\r\n                                    <label>Password</label>\r\n                                    <input\r\n                                        type='password'\r\n                                        className='form-control'\r\n                                        placeholder='Password'\r\n                                        value={this.state.password}\r\n                                        onChange={e => {\r\n                                            this.setState({ password: e.target.value });\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <p>Don't have an account yet? <Link to='/signup'>Sign up</Link></p>\r\n                                <button className='btn btn-primary' type='submit'>Sign in</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Login);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nclass Signup extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        passwordAgain: '',\r\n        name: '',\r\n        username: '',\r\n        error: 'error'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-md-12'>\r\n                        <div className='form-wrapper'>\r\n                            <h1>Signup</h1>\r\n                            <form onSubmit={e => {\r\n                                e.preventDefault();\r\n                                if (this.props.chat.socket) {\r\n                                    let empty = 0;\r\n                                    Object.keys(this.state).forEach(key => {\r\n                                        if (this.state[key] === '') {\r\n                                            empty += 1;\r\n                                        }\r\n                                    })\r\n                                    if (empty > 0) {\r\n                                        return this.setState({ error: 'All Fields Required' });\r\n                                    } else {\r\n                                        if (this.state.password !== this.state.passwordAgain) {\r\n                                            return this.setState({ error: 'Passwords Must Match' })\r\n                                        }\r\n                                    }\r\n                                    this.props.chat.socket.send(JSON.stringify({\r\n                                        type: 'SIGNUP',\r\n                                        data: {\r\n                                            email: this.state.email,\r\n                                            password: this.state.password,\r\n                                            name: this.state.name,\r\n                                            username: this.state.username\r\n                                        }\r\n                                    }))\r\n                                }\r\n                            }}>\r\n                                <div className='row'>\r\n                                    <div className='col-md-6'>\r\n                                        <div className='form-group'>\r\n                                            <label>Name</label>\r\n                                            <input\r\n                                                type='text'\r\n                                                className='form-control'\r\n                                                placeholder='Name'\r\n                                                value={this.state.name}\r\n                                                onChange={e => {\r\n                                                    this.setState({ name: e.target.value });\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='col-md-6'>\r\n                                        <div className='form-group'>\r\n                                            <label>Username</label>\r\n                                            <input\r\n                                                type='text'\r\n                                                className='form-control'\r\n                                                placeholder='Username'\r\n                                                value={this.state.username}\r\n                                                onChange={e => {\r\n                                                    this.setState({ username: e.target.value });\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='col-md-6'>\r\n                                        <div className='form-group'>\r\n                                            <label>Email</label>\r\n                                            <input\r\n                                                type='email'\r\n                                                className='form-control'\r\n                                                placeholder='Email'\r\n                                                value={this.state.email}\r\n                                                onChange={e => {\r\n                                                    this.setState({ email: e.target.value });\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='row'>\r\n                                    <div className='col-md-6'>\r\n                                        <div className='form-group'>\r\n                                            <label>Password</label>\r\n                                            <input\r\n                                                type='password'\r\n                                                className='form-control'\r\n                                                placeholder='Password'\r\n                                                value={this.state.password}\r\n                                                onChange={e => {\r\n                                                    this.setState({ password: e.target.value });\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='col-md-6'>\r\n                                        <div className='form-group'>\r\n                                            <label>Password (Again)</label>\r\n                                            <input\r\n                                                type='password'\r\n                                                className='form-control'\r\n                                                placeholder='Password'\r\n                                                value={this.state.passwordAgain}\r\n                                                onChange={e => {\r\n                                                    this.setState({ passwordAgain: e.target.value });\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <p>Already have an account? <Link to='/login'>Sign in</Link></p>\r\n                                <button className='btn btn-primary' type='submit'>Sign up</button>\r\n                                {this.state.error && this.state.error !== 'error' ?\r\n                                    <p className='text-danger error-message'>{this.state.error}</p>\r\n                                    : null\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Signup);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//COMPONENTS\r\nimport Login from '../partials/login';\r\nimport Signup from '../partials/signup';\r\nclass Authentication extends Component {\r\n    render() {\r\n        return (\r\n            <div className='auth-wrapper'>\r\n                {this.props.match.path === '/signup' ?\r\n                    <Signup />\r\n                    :\r\n                    <Login />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.auth\r\n});\r\n// const mapDispatchToProps = dispatch => ({\r\n\r\n// });\r\nexport default connect(\r\n    mapStateToProps,\r\n)(withRouter(Authentication));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Link } from 'react-router-dom';\r\n\r\n//Material-UI\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//Icons\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport AvatarIcon from '@material-ui/icons/AccountCircle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nclass Sidebar extends Component {\r\n    state = {\r\n        search: '',\r\n        solo: true\r\n    }\r\n    search = () => {\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'SEARCH',\r\n            data: this.state.search\r\n        }))\r\n    }\r\n    findOrCreateThread = (user) => {\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'FIND_THREAD',\r\n            data: [this.props.auth.user, user]\r\n        }))\r\n        this.setState({ search: '' });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='sidebar'>\r\n                <div className='search-container'>\r\n                    <input className='form-control' placeholder='Search for people...' value={this.state.search} onChange={e => {\r\n                        this.setState({ search: e.target.value });\r\n                    }} />\r\n                    <button className='search-button' onClick={e => this.search()}><SearchIcon /></button>\r\n                </div>\r\n                <div className='sidebar-bar'>\r\n                    <button className={`sidebar-button ${!this.state.solo && 'unselected'}`} onClick={e => this.setState({ solo: true })}>People</button>\r\n                    <button className={`sidebar-button ${this.state.solo && 'unselected'}`} onClick={e => this.setState({ solo: false })}>Groups</button>\r\n                </div>\r\n                {this.state.search ?\r\n                    <ul className='thread-list'>\r\n                        <label>Results</label>\r\n                        {this.props.chat.users && this.props.chat.users.filter(u => u.id !== this.props.auth.user.id).map((user, ui) => {\r\n                            return (\r\n                                <li key={ui}>\r\n                                    <div onClick={e => {\r\n                                        e.preventDefault();\r\n                                        console.log(user);\r\n                                        this.findOrCreateThread(user);\r\n                                    }}>\r\n                                        <i className='zmdi zmdi-account-circle' />\r\n                                        <h5 className='title'>{user.name}</h5>\r\n                                        <p>Click to Write a message</p>\r\n                                    </div>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    :\r\n                    this.state.solo ? <ul className='thread-list'>\r\n                        <label>Messages</label>\r\n                        {this.props.chat.threads && this.props.chat.threads.map((thread, ti) => {\r\n                            if (thread.users.length < 3) return (\r\n                                <li key={ti}>\r\n                                    <Link to={`/${thread.id}`} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                        {thread.profiles && thread.profiles.filter(profile => profile.userId !== this.props.auth.user.id)[0].avatar !== '' ?\r\n                                            <Avatar className='sidebar-avatar' src={thread.profiles.filter(profile => profile.userId !== this.props.auth.user.id)[0].avatar} />\r\n                                            : <Avatar className='sidebar-avatar'><AvatarIcon /></Avatar>\r\n                                        }\r\n\r\n                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                            <h5 className='title'>{\r\n\r\n                                                thread.users ?\r\n                                                    thread.users.filter(user => user.userId !== this.props.auth.user.id)[0].username\r\n                                                    :\r\n                                                    ''}\r\n                                            </h5>\r\n                                            <p>{\r\n                                                thread.Messages ?\r\n                                                    thread.Messages[0] ? !thread.Messages[thread.Messages.length - 1].picture ?\r\n                                                        thread.Messages[thread.Messages.length - 1].content.length > 27 ?\r\n                                                            thread.Messages[thread.Messages.length - 1].content.substring(0, 27) + '...'\r\n                                                            :\r\n                                                            thread.Messages[thread.Messages.length - 1].content\r\n                                                        :\r\n                                                        'Picture sended'\r\n                                                        :\r\n                                                        'No Messages'\r\n                                                    :\r\n                                                    'No Messages'}</p>\r\n                                        </div>\r\n                                    </Link>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                        <Link to='/account' style={{ color: 'black' }} className='account-settings' >\r\n                            <SettingsIcon className='settings-icon' />\r\n                            <span style={{ marginLeft: '5px' }}>Account Settings</span>\r\n                        </Link>\r\n                    </ul> :\r\n                        <ul className='thread-list'>\r\n                            <label>Groups</label>\r\n                            <li >\r\n                                <Link to={`/create-group`} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                    <Avatar className='sidebar-avatar'><AddIcon /></Avatar>\r\n                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n\r\n                                        <h5 className='title'>Create a Group</h5>\r\n                                        <p>Click here!</p>\r\n                                    </div>\r\n                                </Link>\r\n                            </li>\r\n                            {this.props.chat.threads && this.props.chat.threads.map((thread, ti) => {\r\n                                if (thread.users.length > 2)\r\n                                    return (\r\n                                        <li key={ti}>\r\n                                            <Link to={`/${thread.id}`} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                                {thread.image !== '' ?\r\n                                                    <Avatar className='sidebar-avatar' src={thread.image} />\r\n                                                    : <Avatar className='sidebar-avatar'><AvatarIcon /></Avatar>\r\n                                                }\r\n\r\n                                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n\r\n                                                    <h5 className='title'>{\r\n                                                        thread.name ?\r\n                                                            thread.name.length > 24 ?\r\n                                                                thread.name.substring(0, thread.name.length - 6) + '...'\r\n                                                                :\r\n                                                                thread.name\r\n                                                            :\r\n                                                            ''}\r\n                                                    </h5>\r\n                                                    <p>{\r\n                                                        thread.Messages ?\r\n                                                            thread.Messages[0] ? !thread.Messages[thread.Messages.length - 1].picture ?\r\n                                                                thread.Messages[thread.Messages.length - 1].content.length > 27 ?\r\n                                                                    thread.Messages[thread.Messages.length - 1].content.substring(0, 27) + '...'\r\n                                                                    :\r\n                                                                    thread.Messages[thread.Messages.length - 1].content\r\n                                                                :\r\n                                                                'Picture sent'\r\n                                                                :\r\n                                                                'No Messages'\r\n                                                            :\r\n                                                            'No Messages'}</p>\r\n                                                </div>\r\n                                            </Link>\r\n                                        </li>\r\n                                    )\r\n                            })}\r\n                            <Link to='/account' style={{ color: 'black' }} className='account-settings' >\r\n                                <SettingsIcon className='settings-icon' />\r\n                                <span style={{ marginLeft: '5px' }}>Account Settings</span>\r\n                            </Link>\r\n                        </ul>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(Sidebar));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n//MATERIAL-UI\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//Icons\r\nimport AvatarIcon from '@material-ui/icons/AccountCircle';\r\n\r\nclass Message extends Component {\r\n    dateFormat = () => {\r\n        const date = Date.parse(this.props.message.date);\r\n        const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }\r\n        let parsedDate;\r\n        if (Intl.DateTimeFormat('pl-PL', { year: 'numeric', month: 'numeric', day: 'numeric' }).format(date) === Intl.DateTimeFormat('pl-PL', { year: 'numeric', month: 'numeric', day: 'numeric' }).format(new Date)) {\r\n            parsedDate = Intl.DateTimeFormat('pl-PL', { hour: 'numeric', minute: 'numeric' }).format(date);\r\n        } else {\r\n            parsedDate = Intl.DateTimeFormat('pl-PL', options).format(date);\r\n        }\r\n        return parsedDate;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={`message-item ${this.props.message.userId === this.props.auth.user.id ? 'msg-right' : 'msg-left'}`}>\r\n                {this.props.profile && this.props.profile === '' ?\r\n                    <Avatar className='message-icon'><AvatarIcon /></Avatar>\r\n                    : <Avatar src={this.props.profile.avatar} className='message-icon' />\r\n                }\r\n\r\n                <div className='username-text'>{this.props.user.userId === this.props.auth.user.Profile.userId ? null : this.props.user.username}</div>\r\n                {!this.props.message.picture ?\r\n                    <div className='chat-bubble' title={this.dateFormat()} data-toggle='tooltip'>\r\n                        {this.props.message.content} </div> :\r\n                    <img className='chat-image' title={this.dateFormat()} src={this.props.message.content} alt='message' />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n});\r\n// const mapDispatchToProps = dispatch => ({\r\n\r\n// });\r\nexport default connect(\r\n    mapStateToProps,\r\n)(Message);","\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Compressor from 'compressorjs';\r\n\r\n//icons\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport PictureIcon from '@material-ui/icons/Image';\r\n\r\n//Actions\r\nimport * as ChatActions from '../store/actions/chatActions';\r\n\r\n\r\nclass ChatInput extends Component {\r\n    state = {\r\n        content: '',\r\n        picture: false\r\n    }\r\n    tobase64 = (target) => {\r\n        const fileInput = target;\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(target);\r\n        reader.onload = () => {\r\n            this.setState({ content: reader.result, picture: true });\r\n            this.sendMessage();\r\n\r\n        }\r\n    }\r\n    compression = (target) => {\r\n        new Compressor(target, {\r\n            quality: 0.6,\r\n            success: (compressedResult) => {\r\n                this.tobase64(compressedResult);\r\n            },\r\n        });\r\n    }\r\n    // sendImage = (target) => {\r\n\r\n    //     this.setState({ content: this.props.toBase64(target), picture: true });\r\n    //     this.sendMessage();\r\n    // }\r\n    sendMessage = () => {\r\n        const msg = {\r\n            threadId: this.props.match.params.threadId,\r\n            userId: this.props.auth.user.id,\r\n            content: this.state.content,\r\n            date: new Date(),\r\n            picture: this.state.picture\r\n        }\r\n        try {\r\n            this.props.chat.socket.send(JSON.stringify({\r\n                type: 'ADD_MESSAGE',\r\n                threadId: msg.threadId,\r\n                message: msg\r\n            }))\r\n        } catch (e) {\r\n        }\r\n        this.setState({ content: '', picture: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <form className='input-view' onSubmit={e => { e.preventDefault(); this.sendMessage() }}>\r\n                <div className='input-group'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Write your message'\r\n                        className='form-control'\r\n                        value={this.state.content}\r\n                        onChange={e => this.setState({ content: e.target.value })}\r\n                    />\r\n                    <label style={{ position: 'fixed', marginLeft: '2px' }}>\r\n                        <PictureIcon className='input-image' />\r\n                        <input className='MyFile' type='file' onChange={e => this.compression(e.target.files[0])} id='file-input-thread' style={{ opacity: '0', width: '0', height: '0' }} />\r\n                    </label>\r\n                    <button className='send-button' type='submit'><SendIcon /></button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    toBase64: (target) => {\r\n        dispatch(ChatActions.toBase64(target))\r\n    }\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(ChatInput));","import * as AuthActions from './authActions';\r\n\r\n\r\nexport const setupSocket = (token, userId) => {\r\n    return dispatch => {\r\n        const socket = new WebSocket('ws://localhost:8080');\r\n        socket.onopen = () => {\r\n            if (token) {\r\n                socket.send(JSON.stringify({\r\n                    type: 'CONNECT_WITH_TOKEN',\r\n                    data: {\r\n                        token: token,\r\n                        userId: userId\r\n                    }\r\n                }));\r\n                dispatch({\r\n                    type: 'SETUP_SOCKET',\r\n                    payload: socket\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: 'SETUP_SOCKET',\r\n                    payload: socket\r\n                });\r\n            }\r\n        }\r\n        socket.onmessage = (message) => {\r\n            let data = JSON.parse(message.data);\r\n            switch (data.type) {\r\n                case 'LOGGEDIN':\r\n                    dispatch(AuthActions.loggedIn(data));\r\n                    break;\r\n                case 'GOT_USERS':\r\n                    dispatch({\r\n                        type: 'GOT_USERS',\r\n                        payload: data.data.users\r\n                    })\r\n                    break;\r\n                case 'ADD_THREAD':\r\n                    dispatch({\r\n                        type: 'ADD_THREAD',\r\n                        payload: data.data\r\n                    })\r\n                    break;\r\n                case 'INITIAL_THREADS':\r\n                    dispatch({\r\n                        type: 'INITIAL_THREADS',\r\n                        payload: data.data\r\n                    })\r\n                    document.getElementById('main-view') ? document.getElementById('main-view').scrollTop = document.getElementById('main-view').scrollHeight : console.log('could not find a component');\r\n                    break;\r\n                case 'GOT_MESSAGES':\r\n                    dispatch({\r\n                        type: 'ADD_MESSAGES_TO_THREAD',\r\n                        payload: {\r\n                            threadId: data.threadId,\r\n                            messages: data.messages\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'ADD_MESSAGE_TO_THREAD':\r\n                    dispatch({\r\n                        type: 'ADD_SINGLE_MESSAGE',\r\n                        payload: {\r\n                            threadId: data.threadId,\r\n                            message: data.message\r\n                        }\r\n                    })\r\n                    document.getElementById('main-view') ? document.getElementById('main-view').scrollTop = document.getElementById('main-view').scrollHeight : console.log('could not find a component');\r\n                    break;\r\n                case 'THREAD_USERS_DATA_CHANGED':\r\n                    dispatch({\r\n                        type: 'THREAD_USERS_CHANGED',\r\n                        payload: {\r\n                            threadId: data.threadId,\r\n                            users: data.users\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'THREAD_NAME_KEY_CHANGED':\r\n                    dispatch({\r\n                        type: 'NEW_THREAD_NAME',\r\n                        payload: {\r\n                            threadId: data.threadId,\r\n                            name: data.threadName\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'THREAD_IMAGE_CHANGED':\r\n                    dispatch({\r\n                        type: 'NEW_THREAD_AVATAR',\r\n                        payload: {\r\n                            threadId: data.threadId,\r\n                            avatar: data.avatar\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'PROFILE_UPDATED':\r\n                    dispatch({\r\n                        type: 'NEW_PROFILE_DATA',\r\n                        payload: {\r\n                            profile: data.profile,\r\n                            userId: data.userId\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'CLIENTS_DATA':\r\n                    dispatch({\r\n                        type: 'ONLINE_CLIENTS_DATA',\r\n                        payload: {\r\n                            clients: data.clients\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'NEW_GROUP_CREATED':\r\n                    dispatch({\r\n                        type: 'GROUP_CREATED',\r\n                        payload: data.thread\r\n                    })\r\n                default:\r\n                //nothing\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const setCurrentThread = (thread) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: \"SET_CURRENT_THREAD\",\r\n            payload: thread\r\n        })\r\n    }\r\n}\r\nexport const toBase64 = (target) => {\r\n    const fileInput = target;\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(fileInput.files[0]);\r\n    reader.onload = () => {\r\n        return reader.result;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Compressor from 'compressorjs';\r\n\r\n//Material-UI\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//Icons\r\nimport Settings from '@material-ui/icons/Settings';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport PictureIcon from '@material-ui/icons/Image';\r\nimport AvatarIcon from '@material-ui/icons/AccountCircle';\r\n//Components\r\nimport Message from './message';\r\nimport ChatInput from '../partials/chatInput';\r\n\r\n//Reducers\r\nimport * as ChatActions from '../store/actions/chatActions';\r\nimport { FlashOnRounded } from '@material-ui/icons';\r\nconst newStyles = (theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n});\r\nclass ThreadView extends Component {\r\n    state = {\r\n        settings: false,\r\n        nicknames: false,\r\n        nicknameEdit: -1,\r\n        newNick: '',\r\n        userId: '',\r\n        threadNameChange: false,\r\n        newThreadName: '',\r\n        solo: true,\r\n        showThreadView: true,\r\n    }\r\n    componentDidMount(props) {\r\n        this.init();\r\n        this.setState({ showThreadView: this.props.match.url !== '/' });\r\n        //this.props.match.path === '/group/:threadId' ? this.setState({ solo: false }) : this.setState({ solo: true });\r\n\r\n    }\r\n    componentDidUpdate(props) {\r\n        if (props.match.params.threadId !== this.props.match.params.threadId) {\r\n            this.init();\r\n        }\r\n        if (props.match.url !== this.props.match.url) {\r\n            this.setState({ showThreadView: this.props.match.url !== '/' })\r\n        }\r\n\r\n    }\r\n    init = () => {\r\n        let currentThread = this.props.chat.threads ? this.props.chat.threads.filter(t => t.id === this.props.match.params.threadId)[0] : null;\r\n        if (currentThread && this.props.chat.socket) {\r\n            let skip = currentThread.Messages || 0;\r\n            try {\r\n                this.props.chat.socket.send(JSON.stringify({\r\n                    type: 'THREAD_LOAD',\r\n                    data: {\r\n                        threadId: this.props.match.params.threadId,\r\n                        skip: skip\r\n                    }\r\n                }));\r\n            } catch (e) {\r\n            }\r\n        }\r\n        currentThread && this.props.setCurrentThread(currentThread);\r\n        currentThread && currentThread.users.length > 2 ? this.setState({ solo: false }) : this.setState({ solo: true });\r\n        //currentThread.users.length < 3 ? this.setState({ solo: true }) : this.setState({ solo: false });\r\n    }\r\n    handleClick = () => {\r\n        this.setState({ nicknames: !this.state.nicknames })\r\n    };\r\n    nickChanged = () => {\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'THREAD_NICK_CHANGED',\r\n            threadId: this.props.match.params.threadId,\r\n            newNick: this.state.newNick,\r\n            userId: this.state.userId\r\n        }));\r\n        this.setState({\r\n            nicknameEdit: -1,\r\n            newNick: ''\r\n        });\r\n    }\r\n    threadNameChanged = () => {\r\n        this.setState({ threadNameChange: false });\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'THREAD_NAME_CHANGED',\r\n            threadId: this.props.match.params.threadId,\r\n            newThreadName: this.state.newThreadName\r\n        }))\r\n    }\r\n    threadAvatarChanged = (result) => {\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'THREAD_AVATAR_CHANGED',\r\n            avatar: result,\r\n            threadId: this.props.match.params.threadId\r\n        }));\r\n    }\r\n    tobase64 = (target) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(target);\r\n        reader.onload = () => {\r\n            this.threadAvatarChanged(reader.result);\r\n        }\r\n    }\r\n    compression = (target) => {\r\n        new Compressor(target, {\r\n            quality: 0.4,\r\n            success: (compressedResult) => {\r\n                this.tobase64(compressedResult);\r\n            },\r\n        });\r\n    }\r\n    render() {\r\n        const classes = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.showThreadView ?\r\n                        <div>\r\n                            <div className='thread-top-bar'>\r\n                                <div style={{ marginLeft: '10px', display: 'flex', justifyContent: 'flex-start', flexDirection: 'row' }}>\r\n                                    {!this.state.solo ?\r\n                                        <div >\r\n                                            {this.props.chat.currentThread && this.props.chat.currentThread.image ?\r\n                                                <Avatar src={this.props.chat.currentThread.image} className='thread-avatar' />\r\n                                                :\r\n                                                <Avatar className='thread-avatar'><AvatarIcon /></Avatar>\r\n                                            }\r\n                                        </div> :\r\n                                        !this.state.settings && this.props.chat.currentThread && <Avatar className='thread-avatar' src={this.props.chat.currentThread.profiles && this.props.chat.currentThread.profiles.filter(p => p.userId !== this.props.auth.user.id)[0].avatar}><AvatarIcon /></Avatar>}\r\n                                    <div className='thread-title'>\r\n                                        {!this.state.settings ?\r\n                                            this.props.chat.currentThread ?\r\n                                                !this.state.solo ?\r\n                                                    this.props.chat.currentThread.name\r\n                                                    :\r\n                                                    this.props.chat.currentThread.users && this.props.chat.currentThread.users.filter(user => user.userId !== this.props.auth.user.id)[0].username\r\n                                                : 'Chat'\r\n                                            :\r\n                                            'Settings'}\r\n                                    </div>\r\n                                </div>\r\n                                <div className='icons'>\r\n                                    <Settings onClick={e => this.setState({ settings: !this.state.settings })} />\r\n                                </div>\r\n                            </div>\r\n                            {!this.state.settings ?\r\n                                <div>\r\n                                    <div className='main-view' id='main-view'>\r\n                                        <div className='message-container'>\r\n                                            {this.props.chat.currentThread.Messages ? this.props.chat.currentThread.Messages.map((msg, mi) => {\r\n                                                return <Message message={msg} key={mi} profile={this.props.chat.currentThread.profiles.filter(profile => msg.userId === profile.userId)[0]} user={this.props.chat.currentThread.users.filter(u => u.userId === msg.userId)[0]} />\r\n\r\n                                            }) : null}\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <ChatInput />\r\n                                </div> :\r\n                                <div className='settings-view'>\r\n                                    <List\r\n                                        component=\"nav\"\r\n                                        aria-labelledby=\"nested-list-subheader\"\r\n                                        className={classes.root}\r\n                                    >\r\n                                        {!this.state.solo && <ListItem button>\r\n                                            {this.state.threadNameChange ?\r\n                                                <form onSubmit={e => this.threadNameChanged()}>\r\n                                                    <TextField id=\"standard-basic\" label={this.props.chat.threads.filter(thread => thread.id === this.props.match.params.threadId).name} onChange={e => this.setState({ newThreadName: e.target.value })} />\r\n                                                </form>\r\n                                                :\r\n                                                <div style={{ display: 'inline-flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%' }} onClick={e => this.setState({ threadNameChange: true })}>\r\n                                                    <ListItemIcon>\r\n                                                        <EditIcon />\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText primary=\"Change Conversation's name\" />\r\n                                                </div>\r\n                                            }\r\n\r\n                                        </ListItem>}\r\n                                        {!this.state.solo && <ListItem button>\r\n                                            <label style={{ display: 'flex', flexDirection: 'row', height: '24px', alignItems: 'center' }} >\r\n\r\n                                                <input className='MyFile' type='file' onChange={e => this.compression(e.target.files[0])} id='file-input-thread' style={{ opacity: '0', width: '0', height: '0' }} />\r\n                                                <ListItemIcon>\r\n                                                    <PictureIcon />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText primary=\"Change Conversation's avatar\" />\r\n                                            </label>\r\n                                        </ListItem>}\r\n                                        <ListItem button onClick={e => this.handleClick()}>\r\n                                            <ListItemIcon>\r\n                                                <InboxIcon />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"Nicknames\" />\r\n                                            {this.state.nicknames ? <ExpandLess /> : <ExpandMore />}\r\n                                        </ListItem>\r\n                                        <Collapse in={this.state.nicknames} timeout=\"auto\" unmountOnExit>\r\n                                            <List component=\"div\" disablePadding>\r\n                                                {this.state.nicknames ?\r\n                                                    this.props.chat.currentThread.users.map((user, ui) => {\r\n                                                        return (\r\n                                                            <ListItem button className={classes.nested} key={ui}\r\n                                                                onClick={e => { this.setState({ nicknameEdit: ui }) }}\r\n                                                            >\r\n                                                                {this.props.chat.currentThread.profiles && this.props.chat.currentThread.profiles.filter(profile => profile.userId === user.userId)[0].avatar === '' ?\r\n                                                                    <Avatar className='settings-nickname-icon'><AvatarIcon /></Avatar>\r\n                                                                    :\r\n                                                                    <Avatar className='settings-nickname-icon' src={this.props.chat.currentThread.profiles.filter(profile => profile.userId === user.userId)[0].avatar} />\r\n                                                                }\r\n                                                                {this.state.nicknameEdit === ui ?\r\n                                                                    <form onSubmit={e => this.nickChanged()}>\r\n                                                                        <TextField id=\"standard-basic\" label={user.username} onChange={e => this.setState({ newNick: e.target.value, userId: user.userId })} />\r\n                                                                    </form>\r\n                                                                    :\r\n                                                                    <div style={{ display: 'inline-flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%' }}>\r\n                                                                        <ListItemText primary={user.username} />\r\n                                                                        <ListItemIcon>\r\n                                                                            <EditIcon />\r\n                                                                        </ListItemIcon></div>\r\n                                                                }\r\n\r\n                                                            </ListItem>\r\n                                                        )\r\n                                                    })\r\n                                                    : null}\r\n\r\n                                            </List>\r\n                                        </Collapse>\r\n                                    </List>\r\n                                </div>\r\n                            }\r\n                        </div> : <div className='title-screen'>\r\n                            <h5 className='title'>Welcome to the ReactMess!</h5>\r\n                            <img style={{ width: '200px' }} src='https://cdn.pixabay.com/photo/2016/10/26/13/09/bird-1771435_960_720.png' alt='hello' />\r\n                        </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentThread: (thread) => {\r\n        dispatch(ChatActions.setCurrentThread(thread));\r\n    }\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(withStyles(newStyles)(ThreadView)));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//Material-UI\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//Icons\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AvatarIcon from '@material-ui/icons/AccountCircle';\r\nimport RadioButtonIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\n\r\n//Actions\r\nimport * as ChatActions from '../store/actions/chatActions';\r\n\r\nconst newStyles = (theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n});\r\nclass GroupCreator extends Component {\r\n    state = {\r\n        users: []\r\n    }\r\n    componentDidMount(props) {\r\n        this.getAllAvailableUsers();\r\n    }\r\n    getAllAvailableUsers = () => {\r\n        //fetch all online users data\r\n        try {\r\n            this.props.chat.socket.send(JSON.stringify({\r\n                type: 'GET_ALL_CLIENTS',\r\n                userId: this.props.auth.user.id\r\n            }));\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    createAGroup = () => {\r\n        const users = this.state.users;\r\n        users.push(this.props.auth.user.id);\r\n        try {\r\n            this.props.chat.socket.send(JSON.stringify({\r\n                type: 'CREATE_A_GROUP',\r\n                users: users\r\n            }))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const classes = this.props;\r\n        return (\r\n            <div className='group-creator'>\r\n                <div className='thread-top-bar'>\r\n                    <div className='thread-title'>\r\n                        Group Creator\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='settings-view' >\r\n                    <List\r\n                        component=\"nav\"\r\n                        aria-labelledby=\"nested-list-subheader\"\r\n                        className={classes.root}\r\n                    >\r\n                        <List component=\"div\" disablePadding>\r\n                            {\r\n\r\n                                this.props.chat.users.length > 0 ? this.props.chat.users.map((user, ui) => {\r\n                                    return (\r\n                                        <ListItem button className={classes.nested} key={ui}\r\n                                            onClick={e => {\r\n                                                let usersArray = this.state.users;\r\n                                                if (this.state.users.filter(u => u === user.userId).length < 1) {\r\n                                                    usersArray.push(user.userId);\r\n                                                    this.setState({ users: usersArray });\r\n                                                } else {\r\n                                                    usersArray = usersArray.filter(u => u !== user.userId);\r\n                                                    this.setState({ users: usersArray });\r\n                                                }\r\n\r\n                                            }}\r\n                                        >\r\n                                            {user.avatar === '' ?\r\n                                                <Avatar className='settings-nickname-icon'><AvatarIcon /></Avatar>\r\n                                                :\r\n                                                <Avatar className='settings-nickname-icon' src={user.avatar} />\r\n                                            }\r\n                                            <div style={{ display: 'inline-flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%', paddingTop: '10px' }}>\r\n                                                <ListItemText primary={user.name} />\r\n                                                <ListItemIcon>\r\n                                                    {this.state.users.filter(u => u === user.userId).length > 0 ?\r\n                                                        <RadioButtonCheckedIcon />\r\n                                                        :\r\n                                                        <RadioButtonIcon />}\r\n\r\n                                                </ListItemIcon></div>\r\n\r\n                                        </ListItem>\r\n                                    )\r\n                                }) :\r\n                                    <ListItem className={classes.nested} style={{ textAlign: 'center' }}><ListItemText primary='No Users Online :c' /></ListItem>\r\n                            }\r\n\r\n                        </List>\r\n                    </List>\r\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n                        {this.state.users.length > 1 ?\r\n                            <button className='button' onClick={e => this.createAGroup()}>Save</button>\r\n                            :\r\n                            <div style={{ textAlign: 'center', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                <div className='button unselected'>Save</div>\r\n                                <div style={{ fontSize: '11px', fontStyle: 'italic', color: '#888' }}>Choose minimum 2</div>\r\n                            </div>\r\n                        }\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n)(withRouter(withStyles(newStyles)(GroupCreator)));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//COMPONENTS\r\nimport Sidebar from '../partials/sidebar';\r\nimport ThreadView from '../partials/threadView';\r\nimport GroupCreator from '../partials/groupCreator';\r\nclass Messenger extends Component {\r\n    render() {\r\n        return (\r\n            <div className='messenger-container'>\r\n                <Sidebar />\r\n                {this.props.match.url !== '/create-group' ?\r\n                    < ThreadView />\r\n                    : <GroupCreator />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.auth,\r\n    ...state.chat\r\n})\r\n// const mapDispatchToProps = dispatch => ({\r\n\r\n// })\r\nexport default connect(\r\n    mapStateToProps,\r\n)(withRouter(Messenger));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Compressor from 'compressorjs';\r\n\r\n//Material-UI\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n//Icons\r\nimport AvatarIcon from '@material-ui/icons/AccountCircle';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n//Actions\r\nimport * as AuthActions from '../store/actions/authActions';\r\nclass Settings extends Component {\r\n    state = {\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        saved: false,\r\n    }\r\n    componentDidMount(props) {\r\n        this.setState({\r\n            email: this.props.auth.user.Profile.email,\r\n            name: this.props.auth.user.Profile.name,\r\n            avatar: this.props.auth.user.Profile.avatar ? this.props.auth.user.Profile.avatar : ''\r\n        })\r\n    }\r\n    profileUpdate = () => {\r\n        this.props.chat.socket.send(JSON.stringify({\r\n            type: 'PROFILE_DATA_UPDATED',\r\n            profileId: this.props.auth.user.Profile.id,\r\n            user: {\r\n                email: this.state.email,\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                id: this.props.auth.user.id\r\n            }\r\n        }))\r\n    }\r\n    tobase64 = (target) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(target);\r\n        reader.onload = () => {\r\n            this.setState({ avatar: reader.result });\r\n        }\r\n    }\r\n    compression = (target) => {\r\n        new Compressor(target, {\r\n            quality: 0.5,\r\n            success: (compressedResult) => {\r\n                this.tobase64(compressedResult);\r\n            },\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.saved ? <div className='container account'>\r\n                    <div className='row'>\r\n                        <div className='col-md-12'>\r\n                            <div className='form-wrapper'>\r\n                                <h1>{`${this.props.auth.user.Profile.name}'s Profile`}</h1>\r\n                                <form onSubmit={e => {\r\n                                    e.preventDefault();\r\n                                    this.profileUpdate();\r\n                                    this.props.profileUpdate(this.state.name, this.state.email, this.state.avatar);\r\n                                    this.setState({ saved: true });\r\n                                }}>\r\n                                    <div className='account-row'>\r\n                                        <div className='account-col'>\r\n                                            <div className='form-group' style={{ paddingTop: '20px' }}>\r\n                                                <label>Your Name</label>\r\n                                                <input\r\n                                                    type='text'\r\n                                                    className='form-control'\r\n                                                    placeholder='Name'\r\n                                                    value={this.state.name}\r\n                                                    onChange={e => {\r\n                                                        this.setState({ name: e.target.value });\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div className='form-group'>\r\n                                                <label>Your Email</label>\r\n                                                <input\r\n                                                    type='email'\r\n                                                    className='form-control'\r\n                                                    placeholder='Email'\r\n                                                    value={this.state.email}\r\n                                                    onChange={e => {\r\n                                                        this.setState({ email: e.target.value });\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <label style={{ marginLeft: '8%' }} className='account-avatar' >\r\n                                            <EditIcon className='edit-icon' />\r\n                                            {this.state.avatar === '' ?\r\n                                                <AvatarIcon className='account-avatar-icon' /> :\r\n                                                <Avatar src={this.state.avatar} alt='Account avatar' className='account-avatar-icon' />}\r\n                                            <input className='MyFile' type='file' onChange={e => this.compression(e.target.files[0])} id='file-input-thread' style={{ opacity: '0', width: '0', height: '0' }} />\r\n                                        </label>\r\n                                    </div>\r\n                                    <button className='btn btn-primary' type='submit' >Save</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    :\r\n                    <Redirect to='/' />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    chat: state.chat\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    profileUpdate: (name, email, avatar) => {\r\n        dispatch(AuthActions.profileUpdate(name, email, avatar));\r\n    }\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Settings);","export const loggedIn = (data) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'LOGGEDIN',\r\n            payload: data\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'LOGGEDOUT',\r\n            payload: null\r\n        })\r\n    }\r\n}\r\nexport const profileUpdate = (name, email, avatar) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'NEW_PROFILE_DATA',\r\n            payload: {\r\n                name: name,\r\n                email: email,\r\n                avatar: avatar\r\n            }\r\n        })\r\n    }\r\n}","import { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\n//REDUCERS\nimport * as ChatActions from './components/store/actions/chatActions';\nimport * as AuthActions from './components/store/actions/authActions';\n\n//PAGES\nimport Authentication from './components/pages/Authentication';\nimport Messenger from './components/pages/Messenger';\nimport Settings from './components/pages/Settings';\n\n//CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/swag.css';\nclass App extends Component {\n  componentDidMount() {\n    this.props.setupSocket(this.props.auth.token, this.props.auth.user.id);\n  }\n  componentDidUpdate() {\n\n  }\n  render() {\n    return (\n      <div className=\"App\" >\n        <BrowserRouter>\n          <Switch>\n            <Route\n              path='/account'\n              render={props => {\n                if (this.props.auth.token) {\n                  return (\n                    <Settings />\n                  )\n                } else {\n                  return (\n                    <Authentication />\n                  )\n                }\n              }}\n            />\n            <Route\n              path='/login'\n              render={props => {\n                if (this.props.auth.token) {\n                  return (\n                    <Redirect to='/' />\n                  )\n                } else {\n                  return (\n                    <Authentication />\n                  )\n                }\n              }\n              } />\n            <Route\n              path='/signup'\n              render={props => {\n                if (this.props.auth.token) {\n                  return (\n                    <Redirect to='/' />\n                  )\n                } else {\n                  return (\n                    <Authentication />\n                  )\n                }\n              }\n              }\n              component={Authentication} />\n            <Route\n              path='/group/:threadId'\n              render={props => {\n                if (!this.props.auth.token) {\n                  return (\n                    <Redirect to='/login' />\n                  )\n                } else {\n                  return (\n                    <Messenger />\n                  )\n                }\n              }} />\n            <Route\n              path='/:threadId'\n              render={props => {\n                if (!this.props.auth.token) {\n                  return (\n                    <Redirect to='/login' />\n                  )\n                } else {\n                  return (\n                    <Messenger />\n                  )\n                }\n              }} />\n            <Route\n              exact={true}\n              path='/create-group'\n              render={props => {\n                if (!this.props.auth.token) {\n                  return (\n                    <Redirect to='/login' />\n                  )\n                } else {\n                  return (\n                    <Messenger />\n                  )\n                }\n              }} />\n            <Route\n              exact={true}\n              path='/'\n              render={props => {\n                if (!this.props.auth.token) {\n                  return (\n                    <Redirect to='/login' />\n                  )\n                } else {\n                  return (\n                    <Messenger />\n                  )\n                }\n              }} />\n          </Switch>\n        </BrowserRouter>\n      </div >\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  chat: state.chat\n})\nconst mapDispatchToProps = dispatch => ({\n  setupSocket: (token, userId) => {\n    dispatch(ChatActions.setupSocket(token, userId));\n  },\n  logout: () => {\n    dispatch(AuthActions.logout());\n  }\n})\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const defaultState = {\r\n    token: null,\r\n    user: {},\r\n\r\n}\r\n\r\nconst auth = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGGEDIN':\r\n            return {\r\n                ...state,\r\n                token: action.payload.data.session.id,\r\n                user: action.payload.data.user\r\n            }\r\n        case 'LOGGEDOUT':\r\n            return {\r\n                ...state,\r\n                ...defaultState\r\n            }\r\n        case 'NEW_PROFILE_DATA':\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    Profile: {\r\n                        ...state.user.Profile,\r\n                        name: action.payload.name,\r\n                        email: action.payload.email,\r\n                        avatar: action.payload.avatar\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default auth;","const defaultState = {\r\n    socket: null,\r\n    message: '',\r\n    threads: [],\r\n    currentThread: {},\r\n    users: []\r\n}\r\n\r\nconst chat = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case 'SETUP_SOCKET':\r\n            return {\r\n                ...state,\r\n                socket: action.payload\r\n            }\r\n        case 'GOT_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            }\r\n        case 'ADD_THREAD':\r\n            return {\r\n                ...state,\r\n                threads: state.threads.filter(t => t.id === action.payload.id).length === 0 ? state.threads.concat(action.payload) : state.threads\r\n            }\r\n        case 'INITIAL_THREADS':\r\n            return {\r\n                ...state,\r\n                threads: action.payload\r\n            }\r\n        case 'ADD_SINGLE_MESSAGE':\r\n            return {\r\n                ...state,\r\n                threads: state.threads ? state.threads.map(thread => {\r\n                    if (thread.id === action.payload.threadId) {\r\n                        return {\r\n                            ...thread,\r\n                            Messages: thread.Messages ? thread.Messages.concat(action.payload.message) : [action.payload.message]\r\n                        }\r\n                    } else {\r\n                        return thread;\r\n                    }\r\n                }) : []\r\n            }\r\n        case 'ADD_MESSAGES_TO_THREAD':\r\n            return {\r\n                ...state,\r\n                threads: state.threads.forEach(t => {\r\n                    if (t.id === action.payload.threadId) {\r\n                        return {\r\n                            ...t,\r\n                            Messages: action.payload.messages.concat(t.Messages)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case 'THREAD_USERS_CHANGED':\r\n            return {\r\n                ...state,\r\n                threads: state.threads.forEach(t => {\r\n                    if (t.id === action.payload.threadId) {\r\n                        return {\r\n                            ...t,\r\n                            users: action.payload.users\r\n                        }\r\n                    }\r\n                }\r\n                )\r\n            }\r\n        case 'NEW_THREAD_NAME':\r\n            return {\r\n                ...state,\r\n                threads: state.threads.forEach(t => {\r\n                    if (t.id === action.payload.threadId) {\r\n                        return {\r\n                            ...t,\r\n                            name: action.payload.name\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case 'SET_CURRENT_THREAD':\r\n            return {\r\n                ...state,\r\n                currentThread: action.payload\r\n            }\r\n        case 'NEW_THREAD_AVATAR':\r\n            return {\r\n                ...state,\r\n                threads: state.threads && state.threads.forEach(t => {\r\n                    if (t.id === action.payload.threadId) {\r\n                        return {\r\n                            ...t,\r\n                            image: action.payload.avatar\r\n                        }\r\n                    }\r\n                }),\r\n                currentThread: {\r\n                    ...state.currentThread,\r\n                    image: action.payload.avatar\r\n                }\r\n            }\r\n        case 'NEW_PROFILE_DATA':\r\n            return {\r\n                ...state,\r\n                users: state.users ? state.users.forEach(u => {\r\n                    if (u.id === action.payload.userId) {\r\n                        return {\r\n                            ...u,\r\n                            Profile: {\r\n                                ...u.Profile,\r\n                                name: action.payload.profile.name,\r\n                                email: action.payload.profile.email,\r\n                                avatar: action.payload.profile.avatar\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }) : []\r\n            }\r\n        case 'ONLINE_CLIENTS_DATA':\r\n            return {\r\n                ...state,\r\n                users: action.payload.clients\r\n            }\r\n        case 'GROUP_CREATED':\r\n            return {\r\n                ...state,\r\n                threads: state.threads.concat(action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default chat;","import { combineReducers } from 'redux';\r\nimport auth from './authReducer';\r\nimport chat from './chatReducer';\r\n\r\nexport default combineReducers({\r\n    auth,\r\n    chat\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from './reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nfunction store() {\r\n    let store = createStore(persistedReducer, applyMiddleware(thunk));\r\n    let persistor = persistStore(store);\r\n    return {\r\n        store,\r\n        persistor\r\n    }\r\n}\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport configureStore from './components/store/configureStore';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}